// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
enum Role {
  Admin
  User
}

model User {
  id       Int     @default(autoincrement()) @id
  email    String  @unique
  nickname String  @unique
  password String
  name     String?
  image    String?
  bio      String?
  role     Role    @default(User)
  comment  Comments[]
  order Order[]
  adress User2Address[]
}

model Masters {
  id     Int              @default(autoincrement()) @id
  name   String
  image  String?
  bio    String?
  skills MastersOnSkills[]
  works  Works[]
}

model    Skills {
  id     Int              @default(autoincrement()) @id
  name   String
  master MastersOnSkills[]
}

model Works {
  id          Int       @default(autoincrement()) @id
  author      Masters   @relation(fields: [authorId], references: [id])
  authorId    Int
  title       String
  slug        String?    @unique
  image       String?
  description String?
  favourites  Int       @default(0)
  date        DateTime? @default(now())
  comments    Comments[]
}

model MastersOnSkills {
  id         Int         @default(autoincrement()) @id
  master     Masters     @relation(fields: [masterId], references: [id])
  masterId   Int
  skills     Skills      @relation(fields: [skillId], references: [id])
  skillId    Int
}

model Comments {
  id        Int       @default(autoincrement()) @id
  work      Works     @relation(fields: [workSlug], references: [slug])
  workSlug  String
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  text      String
  createdAt DateTime  @default(now())
  updatedAt DateTime?
}

model Category {
  id Int @default(autoincrement()) @id
  categoryName String
  product Product[]
}

model Product {
  id        Int       @default(autoincrement()) @id
  title String
  slug String? @unique
  categoryId Int
  category Category  @relation(fields: [categoryId], references: [id])
  article String
  price Float
  image String
  description String
  remains Boolean?  @default(true)
  Sale Int?
  orderItems OrderItem[]
}

model Address {
  id        Int       @default(autoincrement()) @id
  country String
  region String
  city String
  street String
  house String
  corp String?
  apart String?
  phone String
  user User2Address[]
  order Order[]
}

model User2Address {
  id        Int       @default(autoincrement()) @id
  userId Int
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  addressId Int
  address Address @relation(fields: [addressId], references: [id], onDelete: Cascade)
}

model Order {
  id        Int       @default(autoincrement()) @id
  items OrderItem[]
  totalAmount Float
  isPaid Boolean @default(false)
  addressId Int
  userId Int
  address Address @relation(fields: [addressId], references: [id])
  user User @relation(fields: [userId], references: [id])
}

model OrderItem {
  id Int @default(autoincrement()) @id
  count Int
  amount Float
  orderId Int
  order Order @relation(fields: [orderId], references: [id])
  productId Int
  product Product @relation(fields: [productId], references: [id])
}
